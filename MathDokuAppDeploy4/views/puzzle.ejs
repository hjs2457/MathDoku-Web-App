<!DOCTYPE html>
<html>
  <head>
    <link
      rel="stylesheet"
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
      integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
      crossorigin="anonymous"
    />
    <script
      src="https://code.jquery.com/jquery-3.5.1.min.js"
      integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
      crossorigin="anonymous"
    ></script>
    <link
      href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap"
      rel="stylesheet"
    />
    <style>
      canvas {
        padding-top: 100px;
        padding-left: 100px;
        padding-right: 0;
        display: block;
      }
      .container {
        text-align: center;
      }
      button {
        padding-left: 10px;
      }
      nav {
        position: relative;
        overflow: hidden;
      }
      body {
        font-family: "Orbitron", sans-serif;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
        <a class="navbar-brand" href="/">MathDoku</a>
        <button
          class="navbar-toggler"
          type="button"
          data-toggle="collapse"
          data-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
              <a class="nav-link" href="/">Home<span class="sr-only">(current)</span></a>
            </li>
          </ul>
          <div class="my-2 my-lg-0">
            <% if(!currentUser){ %>
              <a>Please login or register</a> 
              <a class="btn btn-outline-primary" href="/login">Login</a>
              <a class="btn btn-outline-success" href="/register">Register</a>
            <% }else{ %>
              <a>Logged in as: <%=currentUser.username%></a>
              <a class="btn btn-outline-danger" href="/logout">Logout</a>
            <% } %>
          </div>
        </div>
      </nav>
    </div>
    <canvas id="gc" width="400" height="400"></canvas>
    <br>
    <div class="container">
      <h3>Instructions</h3>
      <pre>
        Click on a cell to highlight it, and type a number on the keyboard to input a number
        Each row and each column must contain the numbers 1-4
        A single cell with a single number with no math operator means that is a given number
        A box with multiple cells with a number and math operator means that the numbers
        in that box must equate to that number using the math operator
        For example, a box containing "9*" with 3 cells means those 3 numbers must multiply to 9
        which of course the only possibility for that is 3*1*3
        Another example, "5+" with 2 cells means those 2 numbers must add up to 5 so it could be
        a 1 and a 4 or a 2 and a 3
        Another example, "2/" could contain a 1 and a 2 or a 2 and a 4 because 2/1 = 2 and 4/2 = 2
        Another example, "2-" could contain a 4 and a 2 or a 3 and a 1 because 4-2=2 and 3-1=2
      </pre>
    </div>
    <script type="text/javascript">
      window.onload = function () {
        puz = "<%=puzzle%>";
        while(puz.includes("#")){
          puz=puz.replace("#", "");
        }
        while(puz.includes("&")){
          puz=puz.replace("&", "");
        }
        while(puz.includes("34;")){
          puz=puz.replace("34;", "");
        }
        puznum = puz.substring(puz.indexOf("number:")+7, puz.indexOf(",size:"));
        //console.log(puznum);
        verticalWalls = puz.substring(puz.indexOf("verticalWalls:")+"verticalWalls:".length, puz.indexOf("horiz")-1);
        verticalWalls = verticalWalls.substring(1, verticalWalls.length-1);
        verticalWalls = verticalWalls.split(",");
        //console.log(verticalWalls);
        horizontalWalls = puz.substring(puz.indexOf("horizontalWalls:")+"horizontalWalls:".length, puz.indexOf(",ans"));
        horizontalWalls = horizontalWalls.substring(1, horizontalWalls.length-1);
        horizontalWalls = horizontalWalls.split(",");
        //console.log(horizontalWalls);
        answers = puz.substring(puz.indexOf("wers:")+5, puz.indexOf(",oper"));
        answers = answers.substring(1, answers.length-1);
        answers = answers.split(",");
        //console.log(answers);
        getoperations = puz.substring(puz.indexOf("tions:")+6, puz.indexOf(",_id"));
        getoperations = getoperations.substring(1,getoperations.length-1);
        operations = getoperations.split(",");
        //console.log(operations);
        //--------------------------------------
        canv = document.getElementById("gc");
        ctx = canv.getContext("2d");
        document.addEventListener("keydown", keyPush);
        document.addEventListener("click", onClick);
        type = 4;
        ts = canv.width / 4;
        newGame();
        intervalVar = setInterval(game, 100);
      };
      var puz;
      var puznum;
      var canv;
      var ctx;
      var type;
      var ts;
      var tiles;
      var selected;
      var verticalWalls;
      var horizontalWalls;
      var answers;
      var operations;
      var intervalVar;
      var puzzlei;
      var r;
      function newGame() {
        tiles = new Array();
        i = 0;
        for (r = 0; r < ts * type; r += ts) {
          for (c = 0; c < ts * type; c += ts) {
            var t = new tile(c, r, i);
            i++;
            tiles.push(t);
          }
        }
        tiles[12].sel = true;
        selected = 12;
      }
      function game() {
        //draw white rectangle to refresh the page
        ctx.fillStyle = "white";
        ctx.fillRect(0, 0, canv.width, canv.height);
        //draw puzzle borders
        ctx.moveTo(0, 0);
        ctx.lineTo(canv.width, 0);
        ctx.lineTo(canv.width, canv.height);
        ctx.lineTo(0, canv.height);
        ctx.lineTo(0, 0);
        ctx.stroke();
        ctx.font = "64px Arial";
        //for every tile
        for (i in tiles) {
          //color the selected tile with cyan
          ctx.fillStyle = "cyan";
          if (tiles[i].sel == true) {
            ctx.fillRect(tiles[i].x, tiles[i].y, ts, ts);
          }
          ctx.fillStyle = "black";
          //draw the value if it exists
          if (tiles[i].val != null) {
            fs = ctx.fillStyle;
            ctx.fillText(
              tiles[i].val,
              tiles[i].x + ts / 4,
              tiles[i].y - ts / 4 + ts
            );
            ctx.fillStyle = fs;
          }
        }
        //draw vertical lines
        vw = 0;
        for (c = 0; c < canv.width; c += ts) {
          for (r = ts; r < canv.height; r += ts) {
            if (verticalWalls[vw] == 1) {
              ctx.moveTo(r, c);
              ctx.lineTo(r, c + ts);
              ctx.stroke();
            }
            vw++;
          }
        }
        //draw horizonal lines
        hw = 0;
        for (c = ts; c < canv.width; c += ts) {
          for (r = 0; r < canv.height; r += ts) {
            if (horizontalWalls[hw] == 1) {
              ctx.moveTo(r, c);
              ctx.lineTo(r + ts, c);
              ctx.stroke();
            }
            hw++;
          }
        }
        //draw operations
        ctx.font = "24px Arial";
        for (i = 0; i < operations.length; i += 3) {
          ctx.fillText(
            operations[i + 1] + " " + operations[i + 2],
            tiles[operations[i]].x + ts / 8,
            tiles[operations[i]].y + ts / 4
          );
        }
        var valid = true;
        for (i = 0; i < tiles.length; i++) {
          if (tiles[i].val != answers[i]) valid = false;
        }
        //if puzzle is solved, notify
        if (valid) {
          //alert("Well done!");
          clearInterval(intervalVar);
          window.location.href = "/puzzles/"+puznum+"/complete";
        }
      }
      //tiles have an x position, y position, value, currently selected variable, and a number (tiles are numebered 0-15)
      function tile(x, y, num) {
        this.x = x;
        this.y = y;
        this.val = null;
        this.sel = false;
        this.num = num;
      }
      function keyPush(evt) {
        switch (evt.keyCode) {
          case 49: //1
            tiles[selected].val = 1;
            break;
          case 50: //2
            tiles[selected].val = 2;
            break;
          case 51: //3
            tiles[selected].val = 3;
            break;
          case 52: //4
            tiles[selected].val = 4;
            break;
        }
      }
      function onClick(evt) {
        clientx = evt.clientX - 100;
        clienty = evt.clientY - 100;
        for (i = 0; i < tiles.length; i++) {
          if (
            clientx > tiles[i].x &&
            clientx < tiles[i].x + ts &&
            clienty > tiles[i].y &&
            clienty < tiles[i].y + ts
          ) {
            tiles[selected].sel = false;
            selected = i;
            tiles[i].sel = true;
          }
        }
      }
    </script>
  </body>
</html>